{"version":3,"sources":["layout/style/layout.module.css","layout/components/Sidebar.js","layout/components/ContentView.js","layout/index.tsx","features/apartment_1/index.jsx","features/apartment_2/index.jsx","features/index.tsx","router/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MenuItem","props","title","routePath","className","styles","menuitem","activeClassName","active","to","Sidebar","sidebar","ContentView","contentview","router","Layout","root","container","Apartment1","Apartment2","StyledPickerButton","styled","div","StyledApartment_1","StyledApartment_2","Apartman_1","Routes","path","component","TodoList","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kJACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,UAAY,0BAA0B,SAAW,yBAAyB,YAAc,4BAA4B,QAAU,wBAAwB,SAAW,yBAAyB,OAAS,yB,gICE3OC,EAAW,SAAAC,GAAU,IACjBC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,UACf,OACE,gBAAC,IAAD,CACEC,UAAWC,IAAOC,SAClBC,gBAAiBF,IAAOG,OACxBC,GAAIN,GAEHD,IAIMQ,EAAU,SAAAT,GACrB,OACE,uBAAKG,UAAWC,IAAOM,SACrB,gBAAC,EAAD,CAAUT,MAAM,YAAYC,UAAU,aCf/BS,EAAc,SAAAX,GACzB,OAAO,uBAAKG,UAAWC,IAAOQ,aAAcZ,EAAMa,WCCvCC,EAAS,SAACd,GACrB,OACE,uBAAKG,UAAWC,IAAOW,MACrB,uBAAKZ,UAAWC,IAAOY,WACrB,gBAAC,EAAD,MACA,gBAAC,EAAD,CAAaH,OAAQb,EAAMa,Y,cCRtBI,EAAa,WACxB,OAAO,4CCDIC,EAAa,WACxB,OAAO,4C,8iBCET,IAAMC,EAAqBC,IAAOC,IAAV,KAKlBC,EAAoBF,IAAOC,IAAV,KAKjBE,EAAoBH,IAAOC,IAAV,KA8BRG,GAzBOJ,YAAOH,EAAPG,CAAH,KAIGA,YAAOF,EAAPE,CAAH,KAQO,WACxB,OACE,kBAACD,EAAD,KACE,kBAACG,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACC,EAAD,KACE,kBAAC,EAAD,UClCKE,EAAS,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWC,M,MCMvBC,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQhB,OAAQY,MCGFK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.573d3347.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"layout_root__26Uo7\",\"container\":\"layout_container__1urdj\",\"titlebar\":\"layout_titlebar__1csVi\",\"contentview\":\"layout_contentview__2JJxD\",\"sidebar\":\"layout_sidebar__dXejO\",\"menuitem\":\"layout_menuitem__1Lh1x\",\"active\":\"layout_active__3ePYi\"};","import * as React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styles from \"../style/layout.module.css\";\r\nconst MenuItem = props => {\r\n  const { title, routePath } = props;\r\n  return (\r\n    <NavLink\r\n      className={styles.menuitem}\r\n      activeClassName={styles.active}\r\n      to={routePath}\r\n    >\r\n      {title}\r\n    </NavLink>\r\n  );\r\n};\r\nexport const Sidebar = props => {\r\n  return (\r\n    <div className={styles.sidebar}>\r\n      <MenuItem title=\"Apartmani\" routePath=\"/lines\" />\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport styles from \"../style/layout.module.css\";\r\n\r\nexport const ContentView = props => {\r\n  return <div className={styles.contentview}>{props.router()}</div>;\r\n};\r\n","import * as React from \"react\";\r\nimport { Sidebar } from \"./components/Sidebar\";\r\nimport { ContentView } from \"./components/ContentView\";\r\nimport styles from \"./style/layout.module.css\";\r\n\r\nexport const Layout = (props: any) => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.container}>\r\n        <Sidebar />\r\n        <ContentView router={props.router} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Apartment1 = () => {\r\n  return <div>Apartman 1</div>;\r\n};\r\n\r\nexport default Apartment1;\r\n","import React from \"react\";\r\n\r\nexport const Apartment2 = () => {\r\n  return <div>Apartman 2</div>;\r\n};\r\n\r\nexport default Apartment2;\r\n","import React from \"react\";\r\nimport { Apartment1 } from \"../features/apartment_1\";\r\nimport { Apartment2 } from \"../features/apartment_2\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledPickerButton = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr;\r\n`;\r\n\r\nconst StyledApartment_1 = styled.div`\r\n  grid-column: 1/2;\r\n  background-color: blue;\r\n`;\r\n\r\nconst StyledApartment_2 = styled.div`\r\n  grid-column: 4/5;\r\n  background-color: blue;\r\n`;\r\n\r\nconst StyApartment1 = styled(Apartment1)`\r\n  grid-column: 2/3;\r\n`;\r\n\r\nconst StyApartment2 = styled(Apartment2)`\r\n  color: violet;\r\n`;\r\n\r\n/*<StyledApartment_1>\r\n  <Apartment_1 />\r\n</StyledApartment_1>*/\r\n\r\nexport const Apartman_1 = () => {\r\n  return (\r\n    <StyledPickerButton>\r\n      <StyledApartment_1>\r\n        <Apartment1 />\r\n      </StyledApartment_1>\r\n      <StyledApartment_2>\r\n        <Apartment2 />\r\n      </StyledApartment_2>\r\n    </StyledPickerButton>\r\n  );\r\n};\r\n\r\nexport default Apartman_1;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport TodoList from \"../features\";\r\n\r\nexport const Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/lines\" component={TodoList} />\r\n    </Switch>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Layout } from \"./layout\";\nimport { Routes } from \"./router\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Layout router={Routes} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//var destination = document.querySelector(\"#container\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}